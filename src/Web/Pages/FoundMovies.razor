@page "/FoundMovies/{Name?}"
@inject MovieService MovieService
@inject ILocalStorageService LocalStorage
@implements IDisposable

<PageTitle>Найденные фильмы</PageTitle>

<div class="flex flex-wrap">
    <SortDropdown @bind-SortType="@SortType" OnSortTypeUpdate="@(() => LocalStorage.SetItemAsync("SortType", SortType))"/>
    <MovieTypeSortDropdown @bind-MovieType="@MovieType" OnMovieTypeUpdate="@(() => LocalStorage.SetItemAsync("MovieType", MovieType))"/>
    <TagSortDropdown @bind-Tag="@Tag" OnMovieTagUpdate="@(() => LocalStorage.SetItemAsync("MovieTag", Tag))"/>
    <ResetButton OnClick="ResetSorting"/>
</div>

@if (MovieService.GetMoviesByName(SortType, MovieType, Tag, Name) is { Count: not 0 } movies)
{
    <MovieGrid Movies="@movies"/>
}
else
{
    <div class="flex justify-center items-center text-neutral-600 dark:text-neutral-400 font-bold text-[18px] grow">
        По вашему запросу ничего не найдено :(
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string Name { get; set; } = string.Empty;

    private SortType SortType { get; set; }
    private MovieType MovieType { get; set; }
    private string Tag { get; set; } = "all";

    protected override async Task OnParametersSetAsync()
    {
        SortType = await LocalStorage.GetItemAsync<SortType>("SortType");
        MovieType = await LocalStorage.GetItemAsync<MovieType>("MovieType");
        Tag = await LocalStorage.GetItemAsync<string>("MovieTag") ?? "all";
    }

    private void ResetSorting()
    {
        SortType = SortType.None;
        MovieType = MovieType.All;
        Tag = "all";
    }

    public void Dispose()
    {
        MovieService.Dispose();
    }
}