@page "/Movie/{Id:int?}"
@layout EmptyLayout
@inject DatabaseContext DatabaseContext
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Редактирование фильма</PageTitle>

<CascadingValue Value="EditContext">
    <div class="wrapper">
        <DataAnnotationsValidator/>
        <div class="movie-container main">
            <aside style="position: fixed">
                <div class="preview-panel">
                    @if (Movie.PosterPath != string.Empty)
                    {
                        <div class="grid__item" style="background: url('@Movie.PosterPath'); background-size: 270px 480px; width: 270px; height: 480px; margin-bottom: 10px">
                            <h1 class="grid__title" style="font-size: 24px; margin: 0 15px 8px 15px;">@Movie.Name</h1>
                            <div class="grid__container" style="margin: 0 15px 15px 15px;">
                                <h2 class="grid__year" style="font-size: 21px">@Movie.ReleaseYear</h2>
                                <div class="grid__score">
                                    @for (var i = 0; i < Movie.Score; i++)
                                    {
                                        <img class="grid__star" style="width: 24px; height: 24px;" src="icons/star.svg" alt="Тут звезда"/>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="preview-panel__poster data-title">Превью обложки</div>
                    }
                    <ValidationMessage class="data-title data-panel__title" style="color: red; margin-bottom: 10px; text-align: center" For="@(() => Movie.PosterPath)"/>
                    <InputFile class="button preview-panel__button" id="file" OnChange="@LoadPoster">Загрузить обложку</InputFile>
                    <label class="button preview-panel__button preview-panel__label" for="file" style="display: flex; align-items: center">
                        Загрузить обложку
                    </label>
                    <a class="button preview-panel__button" href="https://www.moviemania.io/phone" target="_blank">Искать обложку</a>
                </div>
            </aside>
            <main style="width: 100%; margin-left: 320px">
                <div class="data-panel">
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Тип произведения:</h2>
                        <ValidationMessage class="data-title data-panel__title" style="color: red" For="@(() => Movie.Type)"/>
                        <InputSelect class="data-value data-value_inverted data-value__input" style="@InputSelectStyle()" @bind-Value="Movie.Type">
                            <option selected disabled hidden>Выберите тип</option>
                            <option style="color: var(--main-text)" value="@MovieType.Film">Фильм</option>
                            <option style="color: var(--main-text)" value="@MovieType.Series">Сериал</option>
                            <option style="color: var(--main-text)" value="@MovieType.Cartoon">Мультфильм</option>
                        </InputSelect>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Название фильма:</h2>
                        <ValidationMessage class="data-title data-panel__title" style="color: red" For="@(() => Movie.Name)"/>
                        <InputText class="data-value data-value_inverted data-value__input" placeholder="Введите название..." @bind-Value="Movie.Name"/>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Год выхода:</h2>
                        <ValidationMessage class="data-title data-panel__title" style="color: red" For="@(() => Movie.ReleaseYear)"/>
                        <InputNumber class="data-value data-value_inverted data-value__input" placeholder="Введите год..." @bind-Value="Movie.ReleaseYear"/>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Длительность:</h2>
                        <ValidationMessage class="data-title data-panel__title" style="color: red" For="@(() => Movie.Duration)"/>
                        <InputNumber class="data-value data-value_inverted data-value__input" placeholder="Введите длительность..." @bind-Value="Movie.Duration"/>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Жанр:</h2>
                        <ValidationMessage class="data-title data-panel__title" style="color: red" For="@(() => Movie.Genres)"/>
                        <div class="data-section">
                            @foreach (var genre in Movie.Genres)
                            {
                                <InteractiveDataValue TItem="Genre" Data="@genre" RemoveData="RemoveGenre"/>
                            }
                            <input class="data-value data-value_inverted data-value__input_small" placeholder="Введите значение..." @ref="GenreInput" @onkeydown="AddGenreOnEnterDown" @onfocusout="AddGenre" @bind="Genre" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Режиссер:</h2>
                        <ValidationMessage class="data-title data-panel__title" style="color: red" For="@(() => Movie.Directors)"/>
                        <div class="data-section">
                            @foreach (var director in Movie.Directors)
                            {
                                <InteractiveDataValue TItem="Director" Data="@director" RemoveData="RemoveDirector"/>
                            }
                            <input class="data-value data-value_inverted data-value__input_small" placeholder="Введите значение..." @ref="DirectorInput" @onkeydown="AddDirectorOnEnterDown" @onfocusout="AddDirector" @bind="Director" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Сценарист:</h2>
                        <ValidationMessage class="data-title data-panel__title" style="color: red" For="@(() => Movie.Writers)"/>
                        <div class="data-section">
                            @foreach (var writer in Movie.Writers)
                            {
                                <InteractiveDataValue TItem="Writer" Data="@writer" RemoveData="RemoveWriter"/>
                            }
                            <input class="data-value data-value_inverted data-value__input_small" placeholder="Введите значение..." @ref="WriterInput" @onkeydown="AddWriterOnEnterDown" @onfocusout="AddWriter" @bind="Writer" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Композитор:</h2>
                        <ValidationMessage class="data-title data-panel__title" style="color: red" For="@(() => Movie.Compositors)"/>
                        <div class="data-section">
                            @foreach (var compositor in Movie.Compositors)
                            {
                                <InteractiveDataValue TItem="Compositor" Data="@compositor" RemoveData="RemoveCompositor"/>
                            }
                            <input class="data-value data-value_inverted data-value__input_small" placeholder="Введите значение..." @ref="CompositorInput" @onkeydown="AddCompositorOnEnterDown" @onfocusout="AddCompositor" @bind="Compositor" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">В главных ролях:</h2>
                        <ValidationMessage class="data-title data-panel__title" style="color: red" For="@(() => Movie.Actors)"/>
                        <div class="data-section">
                            @foreach (var actor in Movie.Actors)
                            {
                                <InteractiveDataValue TItem="Actor" Data="@actor" RemoveData="RemoveActor"/>
                            }
                            <input class="data-value data-value_inverted data-value__input_small" placeholder="Введите значение..." @ref="ActorInput" @onkeydown="AddActorOnEnterDown" @onfocusout="AddActor" @bind="Actor" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Оценка:</h2>
                        <MovieScore @bind-Score="Movie.Score"/>
                    </div>
                    <div class="data-panel__section">
                        <h2 class="data-title data-panel__title">Заметка:</h2>
                        <textarea class="data-value data-value_inverted data-value__input data-panel__textarea" placeholder="Введите текст заметки..." resize="none" @bind="Movie.Note" @bind:event="oninput"></textarea>
                    </div>
                </div>
            </main>
        </div>
        <input style="display: none" type="submit"/>
        <footer style="position: sticky; bottom: 0; background-color: var(--main-color)">
            <div class="buttons-container">
                <div class="left-buttons-section">
                    <button class="button buttons-container__button" @onclick="Back">Назад</button>
                </div>
                <div class="right-buttons-section">
                    @if (DatabaseContext.Movies.Contains(Movie))
                    {
                        <button class="danger-button buttons-container__ico" @onclick="Delete">
                            <img class="ico" src="icons/delete.svg" alt="Иконка удаления"/>
                        </button>
                    }
                    <button class="button buttons-container__button" @onclick="AddToWatchLater">Смотреть позже</button>
                    <button class="apply-button buttons-container__button" @onclick="Publish">Опубликовать</button>
                </div>
            </div>
        </footer>
    </div>
</CascadingValue>

@code {
    private Movie Movie { get; set; } = new();
    private EditContext? EditContext { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private string Genre { get; set; } = string.Empty;
    private string Director { get; set; } = string.Empty;
    private string Writer { get; set; } = string.Empty;
    private string Compositor { get; set; } = string.Empty;
    private string Actor { get; set; } = string.Empty;

    private ElementReference GenreInput { get; set; }
    private ElementReference DirectorInput { get; set; }
    private ElementReference WriterInput { get; set; }
    private ElementReference CompositorInput { get; set; }
    private ElementReference ActorInput { get; set; }

    protected override void OnParametersSet()
    {
        LoadMovieData(Id);
        EditContext = new EditContext(Movie);
    }

    private void LoadMovieData(int id)
    {
        if (id == 0) return;

        DatabaseContext.ChangeTracker.Clear();

        Movie = DatabaseContext.Movies
            .AsNoTracking()
            .Include(x => x.Genres)
            .Include(x => x.Directors)
            .Include(x => x.Writers)
            .Include(x => x.Compositors)
            .Include(x => x.Actors)
            .First(x => x.Id == Id);
    }

    private void AddGenreOnEnterDown(KeyboardEventArgs args)
    {
        if(IsEnterPressed(args)) 
            AddGenre();    
    }
    
    private void AddGenre()
    {
        if (IsInputFieldEmpty(Genre))
            return;

        var genre = new Genre { Value = Genre.Trim() };
        Movie.Genres.Add(genre);
        Genre = string.Empty;
    }

    private void RemoveGenre(Genre genre) => Movie.Genres.Remove(genre);

    private void AddDirectorOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
           AddDirector();
    }

    private void AddDirector()
    {
        if (IsInputFieldEmpty(Director))  
            return;
        
        var director = new Director { Value = Director.Trim() };
        Movie.Directors.Add(director);
        Director = string.Empty;
    }

    private void RemoveDirector(Director director) => Movie.Directors.Remove(director);

    private void AddWriterOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddWriter();
    }

    private void AddWriter()
    {
        if (IsInputFieldEmpty(Writer))
            return;
        
        var writer = new Writer { Value = Writer.Trim() };
        Movie.Writers.Add(writer);
        Writer = string.Empty;    
    }

    private void RemoveWriter(Writer writer) => Movie.Writers.Remove(writer);

    private void AddCompositorOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddCompositor();
    }

    private void AddCompositor()
    {
        if (IsInputFieldEmpty(Compositor))
            return;
        
        var compositor = new Compositor { Value = Compositor.Trim() };
        Movie.Compositors.Add(compositor);
        Compositor = string.Empty;    
    }

    private void RemoveCompositor(Compositor compositor) => Movie.Compositors.Remove(compositor);

    private void AddActorOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddActor();
    }

    private void AddActor()
    {
        if (IsInputFieldEmpty(Actor))
            return;
        
        var actor = new Actor { Value = Actor.Trim() };
        Movie.Actors.Add(actor);
        Actor = string.Empty;    
    }

    private void RemoveActor(Actor actor) => Movie.Actors.Remove(actor);

    private async Task LoadPoster(InputFileChangeEventArgs inputFile)
    {
        var filePath = "posters/" + inputFile.File.Name;
        var fileUploadPath = "/app/wwwroot/posters/" + inputFile.File.Name;
        const int maxAllowedFileSize = 1024 * 1024 * 5;

        try
        {
            await using FileStream fileStream = new(fileUploadPath, FileMode.Create);
            await inputFile.File.OpenReadStream(maxAllowedFileSize).CopyToAsync(fileStream);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        Movie.PosterPath = filePath;
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/");
    }

    private void Delete()
    {
        if (DatabaseContext.Movies.Contains(Movie))
        {
            DatabaseContext.Movies.Remove(Movie);
            DatabaseContext.SaveChanges();
        }

        NavigationManager.NavigateTo("/");
    }

    private void AddToWatchLater()
    {
        if (EditContext?.Validate() is false)
            return;

        Movie.WatchLater = true;
        Movie.PublishDate = DateTime.Now;

        if (DatabaseContext.Movies.Any(movie => movie.Id == Movie.Id) is false)
            DatabaseContext.Movies.Add(Movie);
        else
            DatabaseContext.Movies.Update(Movie);

        DatabaseContext.SaveChanges();

        NavigationManager.NavigateTo("WatchLater");
    }

    private void Publish()
    {
        if (EditContext?.Validate() is false)
            return;

        Movie.WatchLater = false;
        Movie.PublishDate = DateTime.Now;

        if (DatabaseContext.Movies.Any(movie => movie.Id == Movie.Id) is false)
            DatabaseContext.Movies.Add(Movie);
        else
            DatabaseContext.Movies.Update(Movie);

        DatabaseContext.SaveChanges();

        NavigationManager.NavigateTo("/");
    }

    private static bool IsEnterPressed(KeyboardEventArgs args) => args.Code is "Enter";
    private static bool IsInputFieldEmpty(string inputValue) => string.IsNullOrWhiteSpace(inputValue);
    
    private string InputSelectStyle() => Movie.Type is null ? "color: var(--light-secondary-text)" : string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", GenreInput);
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", DirectorInput);
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", WriterInput);
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", CompositorInput);
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", ActorInput);
    }

}