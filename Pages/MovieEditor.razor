@page "/Movie/{Id:int?}"
@layout EmptyLayout
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable

<PageTitle>Редактирование фильма</PageTitle>

<CascadingValue Value="EditContext">
    <div class="flex flex-col min-h-full">
        <DataAnnotationsValidator/>
        <div class="flex w-full bg-neutral-900 grow">
            <aside class="fixed">
                <div class="flex flex-col p-[25px] pb-0">
                    @if (Movie.PosterPath != string.Empty)
                    {
                        <div class="flex flex-col justify-end h-[480px] w-[270px] rounded-[15px] bg-cover bg-center cursor-pointer shadow-[inset_0_-105px_30px_-15px_rgba(0,0,0,40%)] mb-[10px]" style="background-image: url('@Movie.PosterPath')">
                            <h1 class="text-[24px] font-bold text-white mx-[15px] leading-tight break-words drop-shadow-[2px_2px_5px_rgba(0,0,0,75%)]">@Movie.Name</h1>
                            <div class="flex justify-between mx-[15px] mb-[15px]">
                                <h2 class="text-[21px] font-bold text-neutral-400 drop-shadow-[2px_2px_5px_rgba(0,0,0,75%)]">@Movie.ReleaseYear</h2>
                                <StarRating Score="Movie.Score" Size="21" Spacing="3"/>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="flex items-center justify-center h-[480px] w-[270px] rounded-[15px] mb-[10px] bg-neutral-800 text-[16px] font-bold text-white">Превью обложки</div>
                    }
                    <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.PosterPath)"/>
                    <InputFile class="bg-neutral-600 text-white rounded-[5px] cursor-pointer text-[16px] font-bold h-[30px] block text-center leading-[30px]" id="file" OnChange="@LoadPoster">Загрузить обложку</InputFile>
                    <label class="flex items-center bg-neutral-600 text-white rounded-[5px] cursor-pointer text-[16px] font-bold h-[34px] text-center leading-[34px] py-[10px] mb-[10px] justify-center" for="file">
                        Загрузить обложку
                    </label>
                    <a class="bg-neutral-600 text-white rounded-[5px] cursor-pointer text-[16px] font-bold h-[34px] block text-center leading-[34px]" href="https://www.moviemania.io/phone" target="_blank">Искать обложку</a>
                </div>
            </aside>
            <main class="ml-[320px] w-full">
                <div class="pt-[25px] pr-[25px]">
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Тип произведения:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.Type)"/>
                        <InputSelect class="h-[34px] text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500 w-full box-border" style="@InputSelectStyle(Movie.Type)" @bind-Value="Movie.Type">
                            <option selected disabled hidden>Выберите тип</option>
                            <option class="text-white" value="@MovieType.Film">Фильм</option>
                            <option class="text-white" value="@MovieType.Series">Сериал</option>
                            <option class="text-white" value="@MovieType.Show">Шоу</option>
                            <option class="text-white" value="@MovieType.Cartoon">Мультфильм</option>
                        </InputSelect>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Название:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.Name)"/>
                        <InputText class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500 w-full box-border" placeholder="Введите название..." @bind-Value="Movie.Name"/>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Год выхода:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.ReleaseYear)"/>
                        <InputNumber class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500 w-full box-border" placeholder="Введите год..." @bind-Value="Movie.ReleaseYear"/>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Длительность:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.Duration)"/>
                        <InputNumber class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500 w-full box-border" placeholder="Введите длительность..." @bind-Value="Movie.Duration"/>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Жанр:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.Genres)"/>
                        <div class="flex flex-wrap gap-[5px]">
                            @foreach (var genre in Movie.Genres)
                            {
                                <InteractiveDataValue TItem="Genre" Data="@genre" RemoveData="RemoveGenre"/>
                            }
                            <input class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500" placeholder="Введите значение..." @ref="GenreInput" @onkeydown="AddGenreOnEnterDown" @onfocusout="AddGenre" @bind="Genre" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Режиссер:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.Directors)"/>
                        <div class="flex flex-wrap gap-[5px]">
                            @foreach (var director in Movie.Directors)
                            {
                                <InteractiveDataValue TItem="Director" Data="@director" RemoveData="RemoveDirector"/>
                            }
                            <input class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500" placeholder="Введите значение..." @ref="DirectorInput" @onkeydown="AddDirectorOnEnterDown" @onfocusout="AddDirector" @bind="Director" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Сценарист:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.Writers)"/>
                        <div class="flex flex-wrap gap-[5px]">
                            @foreach (var writer in Movie.Writers)
                            {
                                <InteractiveDataValue TItem="Writer" Data="@writer" RemoveData="RemoveWriter"/>
                            }
                            <input class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500" placeholder="Введите значение..." @ref="WriterInput" @onkeydown="AddWriterOnEnterDown" @onfocusout="AddWriter" @bind="Writer" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Продюсер:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.Producers)"/>
                        <div class="flex flex-wrap gap-[5px]">
                            @foreach (var producer in Movie.Producers)
                            {
                                <InteractiveDataValue TItem="Producer" Data="@producer" RemoveData="RemoveProducer"/>
                            }
                            <input class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500" placeholder="Введите значение..." @ref="ProducerInput" @onkeydown="AddProducerOnEnterDown" @onfocusout="AddProducer" @bind="Producer" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Композитор:</h2>
                        <div class="flex flex-wrap gap-[5px]">
                            @foreach (var compositor in Movie.Compositors)
                            {
                                <InteractiveDataValue TItem="Compositor" Data="@compositor" RemoveData="RemoveCompositor"/>
                            }
                            <input class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500" placeholder="Введите значение..." @ref="CompositorInput" @onkeydown="AddCompositorOnEnterDown" @onfocusout="AddCompositor" @bind="Compositor" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">В главных ролях:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.Actors)"/>
                        <div class="flex flex-wrap gap-[5px]">
                            @foreach (var actor in Movie.Actors)
                            {
                                <InteractiveDataValue TItem="Actor" Data="@actor" RemoveData="RemoveActor"/>
                            }
                            <input class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500" placeholder="Введите значение..." @ref="ActorInput" @onkeydown="AddActorOnEnterDown" @onfocusout="AddActor" @bind="Actor" @bind:event="oninput"/>
                        </div>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Оценка:</h2>
                        <ValidationMessage class="text-[16px] font-bold text-red-600 mb-[10px] text-center" For="@(() => Movie.Score)"/>
                        <InputSelect class="h-[34px] text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500 w-[188px] box-border" style="@InputSelectStyle(Movie.Score)" @bind-Value="Movie.Score">
                            <option selected disabled hidden>Выберите оценку</option>
                            @for (var index = 10; index >= 0; index--)
                            {
                                <option class="text-white" value="@index">@((float)index / 2)</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-[10px]">
                        <h2 class="text-[16px] font-bold text-white mb-[5px]">Заметка:</h2>
                        <textarea class="text-[16px] font-bold text-neutral-400 bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500 w-full box-border h-[90px] resize-none" placeholder="Введите текст заметки..." resize="none" @bind="Movie.Note" @bind:event="oninput"></textarea>
                    </div>
                </div>
            </main>
        </div>
        <footer class="sticky bottom-0 bg-neutral-900">
            <div class="flex justify-between p-[25px]">
                <div class="flex">
                    <button class="bg-neutral-600 rounded-[5px] cursor-pointer text-white text-[16px] font-bold py-[5px] px-[10px]" @onclick="Back">Назад</button>
                </div>
                <div class="flex gap-[10px]">
                    @if (DatabaseContext.Movies.Contains(Movie))
                    {
                        <button class="bg-red-800 w-[34px] h-[34px] flex items-center justify-center rounded-[5px]" @onclick="Delete">
                            <img class="ico" src="icons/delete.svg" alt="Иконка удаления"/>
                        </button>
                    }
                    <button class="bg-neutral-600 rounded-[5px] cursor-pointer text-white text-[16px] font-bold py-[5px] px-[10px]" @onclick="AddToWatchLater">Смотреть позже</button>
                    <button class="bg-emerald-600 text-white text-[16px] font-bold py-[5px] px-[10px] rounded-[5px]" @onclick="Publish">Опубликовать</button>
                </div>
            </div>
        </footer>
    </div>
</CascadingValue>

@code {
    private DatabaseContext DatabaseContext { get; set; } = new DatabaseContext();
    private Movie Movie { get; set; } = new();
    private EditContext? EditContext { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private string Genre { get; set; } = string.Empty;
    private string Director { get; set; } = string.Empty;
    private string Writer { get; set; } = string.Empty;
    private string Producer { get; set; } = string.Empty;
    private string Compositor { get; set; } = string.Empty;
    private string Actor { get; set; } = string.Empty;

    private ElementReference GenreInput { get; set; }
    private ElementReference DirectorInput { get; set; }
    private ElementReference WriterInput { get; set; }
    private ElementReference ProducerInput { get; set; }
    private ElementReference CompositorInput { get; set; }
    private ElementReference ActorInput { get; set; }

    protected override void OnParametersSet()
    {
        LoadMovieData(Id);
        EditContext = new EditContext(Movie);
    }

    private void LoadMovieData(int id)
    {
        if (id == 0) return;

        Movie = DatabaseContext.Movies
            .Include(x => x.Genres)
            .Include(x => x.Directors)
            .Include(x => x.Writers)
            .Include(x => x.Producers)
            .Include(x => x.Compositors)
            .Include(x => x.Actors)
            .First(x => x.Id == Id);
    }

    private void AddGenreOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddGenre();
    }

    private void AddGenre()
    {
        if (IsInputFieldEmpty(Genre))
            return;

        var genre = new Genre { Value = Genre.Trim() };
        Movie.Genres.Add(genre);
        Genre = string.Empty;
    }

    private void RemoveGenre(Genre genre) => Movie.Genres.Remove(genre);

    private void AddDirectorOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddDirector();
    }

    private void AddDirector()
    {
        if (IsInputFieldEmpty(Director))
            return;

        var director = new Director { Value = Director.Trim() };
        Movie.Directors.Add(director);
        Director = string.Empty;
    }

    private void RemoveDirector(Director director) => Movie.Directors.Remove(director);

    private void AddWriterOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddWriter();
    }

    private void AddWriter()
    {
        if (IsInputFieldEmpty(Writer))
            return;

        var writer = new Writer { Value = Writer.Trim() };
        Movie.Writers.Add(writer);
        Writer = string.Empty;
    }

    private void RemoveWriter(Writer writer) => Movie.Writers.Remove(writer);
    
    private void AddProducerOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddProducer();
    }

    private void AddProducer()
    {
        if (IsInputFieldEmpty(Producer))
            return;

        var producer = new Producer { Value = Producer.Trim() };
        Movie.Producers.Add(producer);
        Producer = string.Empty;
    }

    private void RemoveProducer(Producer producer) => Movie.Producers.Remove(producer);

    private void AddCompositorOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddCompositor();
    }

    private void AddCompositor()
    {
        if (IsInputFieldEmpty(Compositor))
            return;

        var compositor = new Compositor { Value = Compositor.Trim() };
        Movie.Compositors.Add(compositor);
        Compositor = string.Empty;
    }

    private void RemoveCompositor(Compositor compositor) => Movie.Compositors.Remove(compositor);

    private void AddActorOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddActor();
    }

    private void AddActor()
    {
        if (IsInputFieldEmpty(Actor))
            return;

        var actor = new Actor { Value = Actor.Trim() };
        Movie.Actors.Add(actor);
        Actor = string.Empty;
    }

    private void RemoveActor(Actor actor) => Movie.Actors.Remove(actor);

    private async Task LoadPoster(InputFileChangeEventArgs inputFile)
    {
        var filePath = "posters/" + inputFile.File.Name;
        var fileUploadPath = "/app/wwwroot/posters/" + inputFile.File.Name;
        const int maxAllowedFileSize = 1024 * 1024 * 5;

        try
        {
            await using FileStream fileStream = new(fileUploadPath, FileMode.Create);
            await inputFile.File.OpenReadStream(maxAllowedFileSize).CopyToAsync(fileStream);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        Movie.PosterPath = filePath;
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/");
    }

    private void Delete()
    {
        if (DatabaseContext.Movies.Contains(Movie))
        {
            DatabaseContext.Movies.Remove(Movie);
            DatabaseContext.SaveChanges();
        }

        NavigationManager.NavigateTo("/");
    }

    private void AddToWatchLater()
    {
        if (EditContext?.Validate() is false)
            return;

        Movie.WatchLater = true;
        Movie.PublishDate = DateTime.Now;

        if (DatabaseContext.Movies.Any(movie => movie.Id == Movie.Id) is false)
            DatabaseContext.Movies.Add(Movie);
        else
            DatabaseContext.Movies.Update(Movie);

        DatabaseContext.SaveChanges();

        NavigationManager.NavigateTo("WatchLater");
    }

    private void Publish()
    {
        if (EditContext?.Validate() is false)
            return;

        Movie.WatchLater = false;
        Movie.PublishDate = DateTime.Now;

        if (DatabaseContext.Movies.Any(movie => movie.Id == Movie.Id) is false)
            DatabaseContext.Movies.Add(Movie);
        else
            DatabaseContext.Movies.Update(Movie);

        DatabaseContext.SaveChanges();

        NavigationManager.NavigateTo("/");
    }

    private static bool IsEnterPressed(KeyboardEventArgs args) => args.Code is "Enter";
    private static bool IsInputFieldEmpty(string inputValue) => string.IsNullOrWhiteSpace(inputValue);

    private string InputSelectStyle(object? field) => field is null ? "color: var(--light-secondary-text)" : string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", GenreInput);
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", DirectorInput);
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", WriterInput);
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", ProducerInput);
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", CompositorInput);
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", ActorInput);
    }

    public void Dispose()
    {
        DatabaseContext.Dispose();
    }

}