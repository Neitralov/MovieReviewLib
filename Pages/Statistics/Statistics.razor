@page "/Statistics"
@inject DatabaseContext DatabaseContext

<PageTitle>Статистика</PageTitle>

<div class="max-w-screen-lg w-full self-center flex flex-col gap-[20px]">

<DataWithLabelAndDetails
    Label="Количество просмотренных произведений"
    Text="@NumberOfWatchedMovies.ToString()"
    SummaryLabel="Детализация количества просмотренных произведений по типам"
    Details="@(new[] 
             {
                 ("Из них фильмов",       NumberOfWatchedFilms.ToString()), 
                 ("Из них сериалов",      NumberOfWatchedSeries.ToString()), 
                 ("Из них шоу",           NumberOfWatchedShows.ToString()), 
                 ("Из них мультфильмов",  NumberOfWatchedCartoons.ToString()),
                 ("Из них мультсериалов", NumberOfWatchedCartoonSeries.ToString()),
                 ("Из них аниме",         NumberOfWatchedAnime.ToString()) 
             })"/>

<DataWithLabelAndDetails
    Label="Количество отложенных произведений"
    Text="@NumberOfPostponedMovies.ToString()"
    SummaryLabel="Детализация количества отложенных произведений по типам"
    Details="@(new[] 
             {
                 ("Из них фильмов",       NumberOfPostponedFilms.ToString()), 
                 ("Из них сериалов",      NumberOfPostponedSeries.ToString()), 
                 ("Из них шоу",           NumberOfPostponedShows.ToString()), 
                 ("Из них мультфильмов",  NumberOfPostponedCartoons.ToString()),
                 ("Из них мультсериалов", NumberOfPostponedCartoonSeries.ToString()),
                 ("Из них аниме",         NumberOfPostponedAnime.ToString())
             })"/>

<DataWithLabelAndDetails
    Label="Средний рейтинг произведений"
    Text="@AverageMovieRating.ToString("F2")"
    SummaryLabel="Детализация среднего рейтинга произведений по типам"
    Details="@(new[] 
             {
                 ("Средний рейтинг фильмов",       AverageFilmRating.ToString("F2")), 
                 ("Средний рейтинг сериалов",      AverageSeriesRating.ToString("F2")), 
                 ("Средний рейтинг шоу",           AverageShowRating.ToString("F2")), 
                 ("Средний рейтинг мультфильмов",  AverageCartoonRating.ToString("F2")),
                 ("Средний рейтинг мультсериалов", AverageCartoonSeriesRating.ToString("F2")),
                 ("Средний рейтинг аниме",         AverageAnimeRating.ToString("F2"))
             })"/>

<Top10DataList
    Label="Топ-10 произведений по рейтингу">
    @for (var i = 0; i < 10; i++)
    {
        @if (i < Top10MoviesByRaiting?.Length && Top10MoviesByRaiting?[i] is not null)
        {
            <li class="text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-100 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] mb-[5px] list-inside">@Top10MoviesByRaiting?[i].Name (@Top10MoviesByRaiting?[i].Score)</li>
        }
        else
        {
            <li class="text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-100 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] mb-[5px] list-inside">N/A</li>
        }
    }
</Top10DataList>

<div>
    <DataWithLabel
        Label="Самый современный просмотренный фильм"
        Text="@(NewestWatchedFilm is null ? "N/A" : $"{NewestWatchedFilm.Name} ({NewestWatchedFilm.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самый современный просмотренный сериал"
        Text="@(NewestWatchedSeries is null ? "N/A" : $"{NewestWatchedSeries.Name} ({NewestWatchedSeries.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самое современное просмотренное шоу"
        Text="@(NewestWatchedShow is null ? "N/A" : $"{NewestWatchedShow.Name} ({NewestWatchedShow.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самый современный просмотренный мультфильм"
        Text="@(NewestWatchedCartoon is null ? "N/A" : $"{NewestWatchedCartoon.Name} ({NewestWatchedCartoon.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самый современный просмотренный мультсериал"
        Text="@(NewestWatchedCartoonSeries is null ? "N/A" : $"{NewestWatchedCartoonSeries.Name} ({NewestWatchedCartoonSeries.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самое современное просмотренное аниме"
        Text="@(NewestWatchedAnime is null ? "N/A" : $"{NewestWatchedAnime.Name} ({NewestWatchedAnime.ReleaseYear} год)")"/>
</div>

<div>
    <DataWithLabel
        Label="Самый старый просмотренный фильм"
        Text="@(OldestWatchedFilm is null ? "N/A" : $"{OldestWatchedFilm.Name} ({OldestWatchedFilm.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самый старый просмотренный сериал"
        Text="@(OldestWatchedSeries is null ? "N/A" : $"{OldestWatchedSeries.Name} ({OldestWatchedSeries.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самое старое просмотренное шоу"
        Text="@(OldestWatchedShow is null ? "N/A" : $"{OldestWatchedShow.Name} ({OldestWatchedShow.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самый старый просмотренный мультфильм"
        Text="@(OldestWatchedCartoon is null ? "N/A" : $"{OldestWatchedCartoon.Name} ({OldestWatchedCartoon.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самый старый просмотренный мультсериал"
        Text="@(OldestWatchedCartoonSeries is null ? "N/A" : $"{OldestWatchedCartoonSeries.Name} ({OldestWatchedCartoonSeries.ReleaseYear} год)")"/>
    <DataWithLabel
        Label="Самое старое просмотренное аниме"
        Text="@(OldestWatchedAnime is null ? "N/A" : $"{OldestWatchedAnime.Name} ({OldestWatchedAnime.ReleaseYear} год)")"/>
    
</div>

<DataWithLabelAndDetails
    Label="Суммарное количество часов просмотра"
    Text="@TotalViewingHours.ToString()"
    SummaryLabel="Детализация суммарного количества часов просмотров произведений по типам"
    Details="@(new[] 
             {
                 ("Из них фильмов",       TotalFilmViewingHours.ToString()), 
                 ("Из них сериалов",      TotalSeriesViewingHours.ToString()), 
                 ("Из них шоу",           TotalShowViewingHours.ToString()), 
                 ("Из них мультфильмов",  TotalCartoonViewingHours.ToString()), 
                 ("Из них мультсериалов", TotalCartoonSeriesViewingHours.ToString()),
                 ("Из них аниме",         TotalAnimeViewingHours.ToString())
             })"/>

<div>
    <DataWithLabel
        Label="Самый длинный фильм"
        Text="@(LongestFilm is null ? "N/A" : $"{LongestFilm.Name} ({LongestFilm.Duration} минут)")"/>
    <DataWithLabel
        Label="Самый длинный сериал"
        Text="@(LongestSeries is null ? "N/A" : $"{LongestSeries.Name} ({LongestSeries.Duration} минут)")"/>
    <DataWithLabel
        Label="Самое длинное шоу"
        Text="@(LongestShow is null ? "N/A" : $"{LongestShow.Name} ({LongestShow.Duration} минут)")"/>
    <DataWithLabel
        Label="Самый длинный мультфильм"
        Text="@(LongestCartoon is null ? "N/A" : $"{LongestCartoon.Name} ({LongestCartoon.Duration} минут)")"/>
    <DataWithLabel
        Label="Самый длинный мультсериал"
        Text="@(LongestCartoonSeries is null ? "N/A" : $"{LongestCartoonSeries.Name} ({LongestCartoonSeries.Duration} минут)")"/>
    <DataWithLabel
        Label="Самое длинное аниме"
        Text="@(LongestAnime is null ? "N/A" : $"{LongestAnime.Name} ({LongestAnime.Duration} минут)")"/>
</div>

<div>
    <DataWithLabel
        Label="Самый короткий фильм"
        Text="@(ShortestFilm is null ? "N/A" : $"{ShortestFilm.Name} ({ShortestFilm.Duration} минут)")"/>
    <DataWithLabel
        Label="Самый короткий сериал"
        Text="@(ShortestSeries is null ? "N/A" : $"{ShortestSeries.Name} ({ShortestSeries.Duration} минут)")"/>
    <DataWithLabel
        Label="Самое короткое шоу"
        Text="@(ShortestShow is null ? "N/A" : $"{ShortestShow.Name} ({ShortestShow.Duration} минут)")"/>
    <DataWithLabel
        Label="Самый короткий мультфильм"
        Text="@(ShortestCartoon is null ? "N/A" : $"{ShortestCartoon.Name} ({ShortestCartoon.Duration} минут)")"/>
    <DataWithLabel
        Label="Самый короткий мультсериал"
        Text="@(ShortestCartoonSeries is null ? "N/A" : $"{ShortestCartoonSeries.Name} ({ShortestCartoonSeries.Duration} минут)")"/>
    <DataWithLabel
        Label="Самое короткое аниме"
        Text="@(ShortestAnime is null ? "N/A" : $"{ShortestAnime.Name} ({ShortestAnime.Duration} минут)")"/>
</div>

<Top10DataList
    Label="Топ-10 тегов по количеству просмотренных произведений">
    @for (var i = 0; i < 10; i++)
    {
        @if (i < Top10TagsByViews?.Length && Top10TagsByViews?[i] is not null)
        {
            <li class="text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-100 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] mb-[5px] list-inside">@Top10TagsByViews?[i].Tag (@Top10TagsByViews?[i].Count)</li>
        }
        else
        {
            <li class="text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-100 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] mb-[5px] list-inside">N/A</li>
        }
    }
</Top10DataList>

</div>

@code {

    private int NumberOfWatchedMovies { get; set; }
    private int NumberOfWatchedFilms { get; set; }
    private int NumberOfWatchedSeries { get; set; }
    private int NumberOfWatchedShows { get; set; }
    private int NumberOfWatchedCartoons { get; set; }
    private int NumberOfWatchedCartoonSeries { get; set; }
    private int NumberOfWatchedAnime { get; set; }

    private int NumberOfPostponedMovies { get; set; }
    private int NumberOfPostponedFilms { get; set; }
    private int NumberOfPostponedSeries { get; set; }
    private int NumberOfPostponedShows { get; set; }
    private int NumberOfPostponedCartoons { get; set; }
    private int NumberOfPostponedCartoonSeries { get; set; }
    private int NumberOfPostponedAnime { get; set; }

    private double AverageMovieRating { get; set; }
    private double AverageFilmRating { get; set; }
    private double AverageSeriesRating { get; set; }
    private double AverageShowRating { get; set; }
    private double AverageCartoonRating { get; set; }
    private double AverageCartoonSeriesRating { get; set; }
    private double AverageAnimeRating { get; set; }

    private Movie[]? Top10MoviesByRaiting { get; set; }

    private Movie? NewestWatchedFilm { get; set; }
    private Movie? NewestWatchedSeries { get; set; }
    private Movie? NewestWatchedShow { get; set; }
    private Movie? NewestWatchedCartoon { get; set; }
    private Movie? NewestWatchedCartoonSeries { get; set; }
    private Movie? NewestWatchedAnime { get; set; }

    private Movie? OldestWatchedFilm { get; set; }
    private Movie? OldestWatchedSeries { get; set; }
    private Movie? OldestWatchedShow { get; set; }
    private Movie? OldestWatchedCartoon { get; set; }
    private Movie? OldestWatchedCartoonSeries { get; set; }
    private Movie? OldestWatchedAnime { get; set; }

    private int TotalViewingHours { get; set; }
    private int TotalFilmViewingHours { get; set; }
    private int TotalSeriesViewingHours { get; set; }
    private int TotalShowViewingHours { get; set; }
    private int TotalCartoonViewingHours { get; set; }
    private int TotalCartoonSeriesViewingHours { get; set; }
    private int TotalAnimeViewingHours { get; set; }

    private Movie? LongestFilm { get; set; }
    private Movie? LongestSeries { get; set; }
    private Movie? LongestShow { get; set; }
    private Movie? LongestCartoon { get; set; }
    private Movie? LongestCartoonSeries { get; set; }
    private Movie? LongestAnime { get; set; }

    private Movie? ShortestFilm { get; set; }
    private Movie? ShortestSeries { get; set; }
    private Movie? ShortestShow { get; set; }
    private Movie? ShortestCartoon { get; set; }
    private Movie? ShortestCartoonSeries { get; set; }
    private Movie? ShortestAnime { get; set; }

    private TagNameWithViewCounter[]? Top10TagsByViews { get; set; }

    protected override void OnInitialized()
    {
        NumberOfWatchedMovies = DatabaseContext.Movies.Count(movie => movie.IsWatched == true);
        NumberOfWatchedFilms = DatabaseContext.Movies.Count(movie => movie.IsWatched == true && movie.Type == MovieType.Film);
        NumberOfWatchedSeries = DatabaseContext.Movies.Count(movie => movie.IsWatched == true && movie.Type == MovieType.Series);
        NumberOfWatchedShows = DatabaseContext.Movies.Count(movie => movie.IsWatched == true && movie.Type == MovieType.Show);
        NumberOfWatchedCartoons = DatabaseContext.Movies.Count(movie => movie.IsWatched == true && movie.Type == MovieType.Cartoon);
        NumberOfWatchedCartoonSeries = DatabaseContext.Movies.Count(movie => movie.IsWatched == true && movie.Type == MovieType.CartoonSeries);
        NumberOfWatchedAnime = DatabaseContext.Movies.Count(movie => movie.IsWatched == true && movie.Type == MovieType.Anime);

        NumberOfPostponedMovies = DatabaseContext.Movies.Count(movie => movie.IsWatched == false);
        NumberOfPostponedFilms = DatabaseContext.Movies.Count(movie => movie.IsWatched == false && movie.Type == MovieType.Film);
        NumberOfPostponedSeries = DatabaseContext.Movies.Count(movie => movie.IsWatched == false && movie.Type == MovieType.Series);
        NumberOfPostponedShows = DatabaseContext.Movies.Count(movie => movie.IsWatched == false && movie.Type == MovieType.Show);
        NumberOfPostponedCartoons = DatabaseContext.Movies.Count(movie => movie.IsWatched == false && movie.Type == MovieType.Cartoon);
        NumberOfPostponedCartoonSeries = DatabaseContext.Movies.Count(movie => movie.IsWatched == false && movie.Type == MovieType.CartoonSeries);
        NumberOfPostponedAnime = DatabaseContext.Movies.Count(movie => movie.IsWatched == false && movie.Type == MovieType.Anime);

        AverageMovieRating = DatabaseContext.Movies.Any(movie => movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.IsWatched == true).Average(movie => movie.Score) : 0;

        AverageFilmRating = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Film && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Film && movie.IsWatched == true).Average(movie => movie.Score) : 0;

        AverageSeriesRating = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Series && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Series && movie.IsWatched == true).Average(movie => movie.Score) : 0;

        AverageShowRating = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Show && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Show && movie.IsWatched == true).Average(movie => movie.Score) : 0;

        AverageCartoonRating = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true).Average(movie => movie.Score) : 0;
        
        AverageCartoonSeriesRating = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true).Average(movie => movie.Score) : 0;
        
        AverageAnimeRating = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Anime && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Anime && movie.IsWatched == true).Average(movie => movie.Score) : 0;

        Top10MoviesByRaiting = DatabaseContext.Movies.Where(movie => movie.IsWatched == true).OrderByDescending(movie => movie.Score).Take(10).ToArray();

        NewestWatchedFilm = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Film && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Film && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.ReleaseYear)
            : null;

        NewestWatchedSeries = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Series && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Series && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.ReleaseYear)
            : null;

        NewestWatchedShow = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Show && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Show && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.ReleaseYear)
            : null;

        NewestWatchedCartoon = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.ReleaseYear)
            : null;
        
        NewestWatchedCartoonSeries = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.ReleaseYear)
            : null;
        
        NewestWatchedAnime = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Anime && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Anime && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.ReleaseYear)
            : null;

        OldestWatchedFilm = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Film && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Film && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.ReleaseYear)
            : null;

        OldestWatchedSeries = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Series && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Series && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.ReleaseYear)
            : null;

        OldestWatchedShow = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Show && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Show && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.ReleaseYear)
            : null;

        OldestWatchedCartoon = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.ReleaseYear)
            : null;
        
        OldestWatchedCartoonSeries = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.ReleaseYear)
            : null;
        
        OldestWatchedAnime = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Anime && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Anime && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.ReleaseYear)
            : null;

        const int minutesInHour = 60;
        TotalViewingHours = DatabaseContext.Movies.Where(movie => movie.IsWatched == true).Select(movie => movie.Duration!.Value).Sum() / minutesInHour;
        TotalFilmViewingHours = DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Film && movie.IsWatched == true).Select(movie => movie.Duration!.Value).Sum() / minutesInHour;
        TotalSeriesViewingHours = DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Series && movie.IsWatched == true).Select(movie => movie.Duration!.Value).Sum() / minutesInHour;
        TotalShowViewingHours = DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Show && movie.IsWatched == true).Select(movie => movie.Duration!.Value).Sum() / minutesInHour;
        TotalCartoonViewingHours = DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true).Select(movie => movie.Duration!.Value).Sum() / minutesInHour;
        TotalCartoonSeriesViewingHours = DatabaseContext.Movies.Where(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true).Select(movie => movie.Duration!.Value).Sum() / minutesInHour;
        TotalAnimeViewingHours = DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Anime && movie.IsWatched == true).Select(movie => movie.Duration!.Value).Sum() / minutesInHour;
        
        LongestFilm = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Film && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Film && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.Duration)
            : null;

        LongestSeries = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Series && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Series && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.Duration)
            : null;

        LongestShow = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Show && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Show && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.Duration)
            : null;

        LongestCartoon = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.Duration)
            : null;
        
        LongestCartoonSeries = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.Duration)
            : null;
        
        LongestAnime = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Anime && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Anime && movie.IsWatched == true).AsEnumerable().MaxBy(movie => movie.Duration)
            : null;

        ShortestFilm = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Film && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Film && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.Duration)
            : null;

        ShortestSeries = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Series && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Series && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.Duration)
            : null;

        ShortestShow = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Show && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Show && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.Duration)
            : null;

        ShortestCartoon = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Cartoon && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.Duration)
            : null;
        
        ShortestCartoonSeries = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.CartoonSeries && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.Duration)
            : null;
        
        ShortestAnime = DatabaseContext.Movies.Any(movie => movie.Type == MovieType.Anime && movie.IsWatched == true)
            ? DatabaseContext.Movies.Where(movie => movie.Type == MovieType.Anime && movie.IsWatched == true).AsEnumerable().MinBy(movie => movie.Duration)
            : null;

        Top10TagsByViews = DatabaseContext.Movies
            .Where(movie => movie.IsWatched == true)
            .SelectMany(movie => movie.Tags)
            .Select(tag => tag.Value)
            .GroupBy(tag => tag)
            .Select(tag => new TagNameWithViewCounter
            {
                Tag = tag.Key,
                Count = tag.Count()
            })
            .OrderByDescending(tag => tag.Count)
            .Take(10)
            .ToArray();
    }

    public record TagNameWithViewCounter
    {
        public string? Tag { get; init; }
        public int Count { get; init; }
    }

}