@page "/"
@page "/Viewed/{Name?}"
@inject DatabaseContext DatabaseContext

<PageTitle>Просмотренные</PageTitle>

<SortingDropDownList @bind-SortType="@SortType"/>
<MovieGrid Movies="@SortedMovies"/>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Name { get; set; }
    
    private SortType SortType { get; set; }

    protected override void OnParametersSet()
    {
        DatabaseContext.Movies
            .Include(x => x.Genres)
            .Include(x => x.Directors)
            .Include(x => x.Writers)
            .Include(x => x.Compositors)
            .Include(x => x.Actors)
            .Load();

        if (string.IsNullOrWhiteSpace(Name))
            return;

        //var movie = DatabaseContext.Movies.FirstOrDefault(movie => movie.Name == Name);
        //Movies = movie is null ? new List<Movie>() : new List<Movie> { movie };
    }

    private List<Movie> SortedMovies
    {
        get
        {
            var watchedMovies = DatabaseContext.Movies.Where(movie => movie.WatchLater == false);

            return SortType switch
            {
                SortType.AdditionOrder            => watchedMovies.OrderByDescending(movie => movie.PublishDate).ToList(),
                SortType.ReverseAdditionOrder     => watchedMovies.OrderBy(movie => movie.PublishDate).ToList(),
                SortType.ByIncreasingRating       => watchedMovies.OrderByDescending(movie => movie.Score).ToList(),
                SortType.ByDescendingRating       => watchedMovies.OrderBy(movie => movie.Score).ToList(),
                SortType.AlphabeticalOrder        => watchedMovies.OrderBy(movie => movie.Name).ToList(),
                SortType.ReverseAlphabeticalOrder => watchedMovies.OrderByDescending(movie => movie.Name).ToList(),
                _                                 => throw new ArgumentOutOfRangeException()
                };
        }
    }

}