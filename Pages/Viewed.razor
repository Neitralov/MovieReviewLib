@page "/"
@page "/Viewed/{Name?}"
@inject DatabaseContext DatabaseContext
@inject NavigationManager NavigationManager

<PageTitle>Просмотренные</PageTitle>

<div class="toolbar">
    <span class="toolbar__sort-label">Сортировка: </span>
    <InputSelect class="toolbar__sort-list" @bind-Value="SortType" @onclick="SortMovies">
        <option value="@SortType.AdditionOrder">сначала новые</option>
        <option value="@SortType.ReverseAdditionOrder">сначала старые</option>
        <option value="@SortType.ByIncreasingRating">по возрастанию рейтинга</option>
        <option value="@SortType.ByDescendingRating">по убыванию рейтинга</option>
        <option value="@SortType.AlphabeticalOrder">в алфавитном порядке</option>
        <option value="@SortType.ReverseAlphabeticalOrder">в обратном алфавитном порядке</option>
    </InputSelect>
</div>
<div class="grid">
    @foreach (var movie in Movies)
    {
        if (movie.WatchLater)
        {
            <MoviePoster
                Id="@movie.Id"
                PosterPath="@movie.PosterPath"
                Name="@movie.Name"
                ReleaseYear="@movie.ReleaseYear"
                Score="@movie.Score"
                OpenInMovieEditor="OpenInMovieEditor"
                IsWatchLater="true"/>
        }
        else
        {
            <MoviePoster
                Id="@movie.Id"
                PosterPath="@movie.PosterPath"
                Name="@movie.Name"
                ReleaseYear="@movie.ReleaseYear"
                Score="@movie.Score"
                OpenInMovieEditor="OpenInMovieEditor"/>
        }
    }
</div>

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Name { get; set; }

    private List<Movie> Movies { get; set; } = new();
    private SortType SortType { get; set; }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"Name = {Name}");

        if (string.IsNullOrWhiteSpace(Name))
        {
            Movies = DatabaseContext.Movies
                .Include(x => x.Genres)
                .Include(x => x.Directors)
                .Include(x => x.Writers)
                .Include(x => x.Compositors)
                .Include(x => x.Actors)
                .Where(x => x.WatchLater == false)
                .ToList();

            SortMovies();
        }
        else
        {
            var movie = DatabaseContext.Movies.FirstOrDefault(movie => movie.Name == Name);

            Movies = movie is null ? new List<Movie>() : new List<Movie> { movie };
        }
    }

    private void SortMovies()
    {
        Movies = SortType switch
        {
            SortType.AdditionOrder            => Movies.OrderByDescending(movie => movie.PublishDate).ToList(),
            SortType.ReverseAdditionOrder     => Movies.OrderBy(movie => movie.PublishDate).ToList(),
            SortType.ByIncreasingRating       => Movies.OrderByDescending(movie => movie.Score).ToList(),
            SortType.ByDescendingRating       => Movies.OrderBy(movie => movie.Score).ToList(),
            SortType.AlphabeticalOrder        => Movies.OrderBy(movie => movie.Name).ToList(),
            SortType.ReverseAlphabeticalOrder => Movies.OrderByDescending(movie => movie.Name).ToList(),
            _                                 => throw new ArgumentOutOfRangeException()
            };
    }

    private void OpenInMovieEditor(int id)
    {
        NavigationManager.NavigateTo($"/Movie/?Id={id}");
    }

}