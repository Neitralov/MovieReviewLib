@inject IJSRuntime JsRuntime

<main class="w-full">
    <div class="mb-[10px]">
        <h2 class="inline-block text-[16px] font-bold text-neutral-950 dark:text-white mb-[5px]">Тип произведения:</h2>
        <ValidationMessage class="inline-block text-[16px] font-bold text-red-600 mb-[5px] text-center" For="@(() => Movie.Type)"/>
        <InputSelect class="h-[34px] text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-200 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] placeholder-neutral-500 w-full" @bind-Value="Movie.Type">
            <option selected disabled hidden>Выберите тип</option>
            <option value="@MovieType.Film">Фильм</option>
            <option value="@MovieType.Series">Сериал</option>
            <option value="@MovieType.Show">Шоу</option>
            <option value="@MovieType.Cartoon">Мультфильм</option>
            <option value="@MovieType.CartoonSeries">Мультсериал</option>
            <option value="@MovieType.Anime">Аниме</option>
        </InputSelect>
    </div>
    <div class="mb-[10px]">
        <h2 class="inline-block text-[16px] font-bold text-neutral-950 dark:text-white mb-[5px]">Название:</h2>
        <ValidationMessage class="inline-block text-[16px] font-bold text-red-600 mb-[5px] text-center" For="@(() => Movie.Name)"/>
        <input class="text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-200 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] placeholder-neutral-500 w-full" placeholder="Введите название..." @bind="Movie.Name" @bind:event="oninput" @bind:after="MovieDataChanged"/>
    </div>
    <div class="mb-[10px]">
        <h2 class="inline-block text-[16px] font-bold text-neutral-950 dark:text-white mb-[5px]">Год выхода:</h2>
        <ValidationMessage class="inline-block text-[16px] font-bold text-red-600 mb-[5px] text-center" For="@(() => Movie.ReleaseYear)"/>
        <input class="text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-200 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] placeholder-neutral-500 w-full" placeholder="Введите год..." @bind="Movie.ReleaseYear" @bind:event="oninput" @bind:after="MovieDataChanged"/>
    </div>
    <div class="mb-[10px]">
        <h2 class="inline-block text-[16px] font-bold text-neutral-950 dark:text-white mb-[5px]">Длительность в минутах:</h2>
        <ValidationMessage class="inline-block text-[16px] font-bold text-red-600 mb-[5px] text-center" For="@(() => Movie.Duration)"/>
        <InputNumber class="text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-200 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] placeholder-neutral-500 w-full" placeholder="Введите длительность..." @bind-Value="Movie.Duration"/>
    </div>
    <div class="mb-[10px]">
        <h2 class="inline-block text-[16px] font-bold text-neutral-950 dark:text-white mb-[5px]">Теги:</h2>
        <ValidationMessage class="inline-block text-[16px] font-bold text-red-600 mb-[5px] text-center" For="@(() => Movie.Tags)"/>
        <div class="flex flex-wrap gap-[5px]">
            @foreach (var tag in Movie.Tags)
            {
                <TagsInput Data="@tag" RemoveData="RemoveTag"/>
            }
            <input class="text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-200 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] placeholder-neutral-500" placeholder="Введите значение..." @ref="TagInput" @onkeydown="AddTagOnEnterDown" @onfocusout="AddTag" @bind="Tag" @bind:event="oninput"/>
        </div>
    </div>
    <div class="mb-[10px]">
        <h2 class="inline-block text-[16px] font-bold text-neutral-950 dark:text-white mb-[5px]">Статус:</h2>
        <InputSelect class="h-[34px] text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-200 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500 w-[188px]" @bind-Value="Movie.IsWatched">
            <option value="false">Отложен</option>
            <option value="true">Просмотрен</option>
        </InputSelect>
    </div>
    <div class="mb-[10px]">
        <h2 class="inline-block text-[16px] font-bold text-neutral-950 dark:text-white mb-[5px]">Оценка:</h2>
        <select class="h-[34px] text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-200 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500 w-[188px]" @bind="Movie.Score" @bind:event="oninput" @bind:after="MovieDataChanged">
            @for (var index = 5; index > 0; index--)
            {
                <option value="@index">@index</option>
            }
            <option value="0">0</option>
        </select>
    </div>
    <div>
        <h2 class="text-[16px] font-bold text-neutral-950 dark:text-white mb-[5px]">Заметка:</h2>
        <textarea class="text-[16px] font-bold text-neutral-600 dark:text-neutral-400 bg-neutral-200 dark:bg-neutral-800 py-[5px] px-[10px] rounded-[5px] block placeholder-neutral-500 w-full resize-none" placeholder="Введите текст заметки..." rows="5" resize="none" @bind="Movie.Note" @bind:event="oninput"></textarea>
    </div>
</main>

@code {

    [Parameter]
    public Movie Movie { get; set; } = null!;

    private string Tag { get; set; } = string.Empty;

    private ElementReference TagInput { get; set; }
    
    [Parameter]
    public Action? MovieDataChanged { get; set; }

    private void AddTagOnEnterDown(KeyboardEventArgs args)
    {
        if (IsEnterPressed(args))
            AddTag();
    }

    private void AddTag()
    {
        if (IsInputFieldEmpty(Tag))
            return;

        if (Movie.Tags.Any(tag => string.Equals(tag.Value.Trim().ToLower(), Tag.Trim().ToLower())))
        {
            Tag = string.Empty;
            return;
        }

        var tag = new Tag { Value = Tag.Trim() };
        Movie.Tags.Add(tag);
        Tag = string.Empty;
    }

    private void RemoveTag(Tag tag) => Movie.Tags.Remove(tag);

    private static bool IsEnterPressed(KeyboardEventArgs args) => args.Code is "Enter";
    private static bool IsInputFieldEmpty(string inputValue) => string.IsNullOrWhiteSpace(inputValue);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("CalcInputWidthAndSet", TagInput);
    }
}