@page "/FoundMovies/{Name?}"
@inject DatabaseContext DatabaseContext

<PageTitle>Найденные фильмы</PageTitle>

<div class="flex flex-wrap">
    <SortDropdown @bind-SortType="@SortType"/>
    <MovieTypeSortDropdown @bind-MovieType="@MovieType"/>
    <GenreSortDropdown @bind-Genre="@Genre"/>
</div>

@if (FoundMovie() is { Count: not 0 } movie)
{
    <MovieGrid Movies="@movie"/>
}
else
{
    <div class="flex justify-center items-center text-neutral-600 dark:text-neutral-400 font-bold text-[18px] grow mt-[20px]">
        По вашему запросу ничего не найдено :(
    </div>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Name { get; set; }
    
    private SortType SortType { get; set; }
    private MovieType MovieType { get; set; }
    private string Genre { get; set; } = "all";

    private List<Movie> FoundMovie()
    {
        var movies = DatabaseContext.Movies
            .AsNoTracking()
            .Include(movie => movie.Genres)
            .AsEnumerable()
            .Where(movie => movie.Name.ToLower().Contains(Name!.ToLower()))
            .ToList();

        var sortedMovies = SortType switch
        {
            SortType.AdditionOrder            => movies.OrderByDescending(movie => movie.PublishDate).ToList(),
            SortType.ReverseAdditionOrder     => movies.OrderBy(movie => movie.PublishDate).ToList(),
            SortType.ByIncreasingRating       => movies.OrderByDescending(movie => movie.Score).ToList(),
            SortType.ByDescendingRating       => movies.OrderBy(movie => movie.Score).ToList(),
            SortType.AlphabeticalOrder        => movies.OrderBy(movie => movie.Name).ToList(),
            SortType.ReverseAlphabeticalOrder => movies.OrderByDescending(movie => movie.Name).ToList(),
            _                                 => throw new ArgumentOutOfRangeException()
            };

        var moviesSortedByType = MovieType switch
        {
            MovieType.All     => sortedMovies,
            MovieType.Film    => sortedMovies.Where(movie => movie.Type == MovieType.Film).ToList(),
            MovieType.Series  => sortedMovies.Where(movie => movie.Type == MovieType.Series).ToList(),
            MovieType.Show    => sortedMovies.Where(movie => movie.Type == MovieType.Show).ToList(),
            MovieType.Cartoon => sortedMovies.Where(movie => movie.Type == MovieType.Cartoon).ToList(),
            _                 => throw new ArgumentOutOfRangeException()
            };

        var moviesSortedByGenre = Genre switch
        {
            "all" => moviesSortedByType,
            _ => moviesSortedByType.Where(movie => movie.Genres.Select(genre => genre.Value).Any(genre => genre == Genre)).ToList()
            };

        return moviesSortedByGenre;
    }

}