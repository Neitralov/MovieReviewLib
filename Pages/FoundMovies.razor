@page "/FoundMovies/{Name?}"
@inject DatabaseContext DatabaseContext

<PageTitle>Найденные фильмы</PageTitle>

<div class="flex flex-wrap">
    <SortDropdown @bind-SortType="@SortType"/>
    <MovieTypeSortDropdown @bind-MovieType="@MovieType"/>
    <TagSortDropdown @bind-Tag="@Tag"/>
    <ResetButton OnClick="ResetSorting"/>
</div>

@if (GetSortedMovies() is { Count: not 0 } movies)
{
    <MovieGrid Movies="@movies"/>
}
else
{
    <div class="flex justify-center items-center text-neutral-600 dark:text-neutral-400 font-bold text-[18px] grow">
        По вашему запросу ничего не найдено :(
    </div>
}

@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Name { get; set; }
    
    private SortType SortType { get; set; }
    private MovieType MovieType { get; set; }
    private string Tag { get; set; } = "all";

    private List<Movie> GetSortedMovies()
    {
        var movies = DatabaseContext.Movies
            .AsNoTracking()
            .Include(movie => movie.Tags)
            .AsEnumerable()
            .Where(movie => movie.Name.ToLower().Contains(Name!.ToLower()))
            .ToList();

        var sortedMovies = SortType switch
        {
            SortType.AdditionOrder            => movies.OrderByDescending(movie => movie.PublishDate).ToList(),
            SortType.ReverseAdditionOrder     => movies.OrderBy(movie => movie.PublishDate).ToList(),
            SortType.FromNewToOld             => movies.OrderByDescending(movie => movie.ReleaseYear).ToList(),
            SortType.FromOldToNew             => movies.OrderBy(movie => movie.ReleaseYear).ToList(),
            SortType.ByIncreasingRating       => movies.OrderBy(movie => movie.Score).ToList(),
            SortType.ByDescendingRating       => movies.OrderByDescending(movie => movie.Score).ToList(),
            SortType.AlphabeticalOrder        => movies.OrderBy(movie => movie.Name).ToList(),
            SortType.ReverseAlphabeticalOrder => movies.OrderByDescending(movie => movie.Name).ToList(),
            _                                 => throw new ArgumentOutOfRangeException()
            };

        var moviesSortedByType = MovieType switch
        {
            MovieType.All           => sortedMovies,
            MovieType.Film          => sortedMovies.Where(movie => movie.Type == MovieType.Film).ToList(),
            MovieType.Series        => sortedMovies.Where(movie => movie.Type == MovieType.Series).ToList(),
            MovieType.Show          => sortedMovies.Where(movie => movie.Type == MovieType.Show).ToList(),
            MovieType.Cartoon       => sortedMovies.Where(movie => movie.Type == MovieType.Cartoon).ToList(),
            MovieType.CartoonSeries => sortedMovies.Where(movie => movie.Type == MovieType.CartoonSeries).ToList(),
            MovieType.Anime         => sortedMovies.Where(movie => movie.Type == MovieType.Anime).ToList(),
            _                       => throw new ArgumentOutOfRangeException()
            };

        var moviesSortedByTag = Tag switch
        {
            "all" => moviesSortedByType,
            _ => moviesSortedByType.Where(movie => movie.Tags.Select(tag => tag.Value).Any(tag => tag == Tag)).ToList()
            };

        return moviesSortedByTag;
    }

    private void ResetSorting()
    {
        SortType = SortType.AdditionOrder;
        MovieType = MovieType.All;
        Tag = "all";
    }

}