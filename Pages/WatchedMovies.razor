@page "/"
@inject DatabaseContext DatabaseContext

<PageTitle>Просмотренные</PageTitle>

<div style="display: flex; flex-wrap: wrap">
    <SortDropdown @bind-SortType="@SortType"/>
    <MovieTypeSortDropdown @bind-MovieType="@MovieType"/>
</div>

@if (GetSortedMovies() is { Count: not 0 } movies)
{
    <MovieGrid Movies="@movies"/>
}
else
{
    @if (DatabaseContext.Movies.Any(movie => movie.WatchLater == false))
    {
        <div style="display: flex; justify-content: center; align-items: center; color: var(--secondary-text); font-weight: bold; font-size: 18px; flex-grow: 1">
            Нет ничего, чтобы удовлетворяло текущим настройкам сортировки.
        </div>       
    }
    else
    {
        <div style="display: flex; justify-content: center; align-items: center; color: var(--secondary-text); font-weight: bold; font-size: 18px; flex-grow: 1">
            У вас нет отложенных фильмов.
        </div>    
    }
}

@code {

    private SortType SortType { get; set; }
    private MovieType MovieType { get; set; }

    private List<Movie> GetSortedMovies()
    {
        var watchedMovies = DatabaseContext.Movies.AsNoTracking().Where(movie => movie.WatchLater == false);
        
        var sortedMovies = SortType switch
        {
            SortType.AdditionOrder            => watchedMovies.OrderByDescending(movie => movie.PublishDate).ToList(),
            SortType.ReverseAdditionOrder     => watchedMovies.OrderBy(movie => movie.PublishDate).ToList(),
            SortType.ByIncreasingRating       => watchedMovies.OrderByDescending(movie => movie.Score).ToList(),
            SortType.ByDescendingRating       => watchedMovies.OrderBy(movie => movie.Score).ToList(),
            SortType.AlphabeticalOrder        => watchedMovies.OrderBy(movie => movie.Name).ToList(),
            SortType.ReverseAlphabeticalOrder => watchedMovies.OrderByDescending(movie => movie.Name).ToList(),
            _                                 => throw new ArgumentOutOfRangeException()
            };

        var moviesSortedByType = MovieType switch
        {
            MovieType.All     => sortedMovies,
            MovieType.Film    => sortedMovies.Where(movie => movie.Type == Data.MovieType.Film).ToList(),
            MovieType.Series  => sortedMovies.Where(movie => movie.Type == Data.MovieType.Series).ToList(),
            MovieType.Show    => sortedMovies.Where(movie => movie.Type == Data.MovieType.Show).ToList(),
            MovieType.Cartoon => sortedMovies.Where(movie => movie.Type == Data.MovieType.Cartoon).ToList(),
            _                 => throw new ArgumentOutOfRangeException()
            };

        return moviesSortedByType;
    }

}